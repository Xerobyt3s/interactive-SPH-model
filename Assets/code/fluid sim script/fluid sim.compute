#pragma kernel OutsideForces
#pragma kernel UpdateSpatialLookUp
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
//#pragma kernel CalculateSurfaceTensionForce
#pragma kernel UpdateParticlePosition

#include "./FluidMaths2D.hlsl"
#include "./spatialHash.hlsl"

static const int3 Threads = int3(8, 8, 1);

RWStructuredBuffer<float2> positions;
RWStructuredBuffer<float2> predictedPositions;
RWStructuredBuffer<float2> velocities;
RWStructuredBuffer<float2> densities;

//used in my neighbour search algorithm
RWStructuredBuffer<uint3> spacialLookUp;
RWStructuredBuffer<int> startIndecies;


//constants for the simulation
const uint particleCount;
const float gravity;
const float deltaTime;
const float collisionDampening;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float nearPressureMultiplier;
const float viscosityMultiplier;
const float2 boundsSize;
const float2 mousePosition;
const float mouseInputStrength;
const float mouseRadius;

//polynomial functions
float DensityKernel(float dst, float radius)
{
	return SpikyKernelPow2(dst, radius);
}

float NearDensityKernel(float dst, float radius)
{
	return SpikyKernelPow3(dst, radius);
}

float DensityDerivative(float dst, float radius)
{
	return DerivativeSpikyPow2(dst, radius);
}

float NearDensityDerivative(float dst, float radius)
{
	return DerivativeSpikyPow3(dst, radius);
}

float ViscosityKernel(float dst, float radius)
{
	return SmoothingKernelPoly6(dst, smoothingRadius);
}

// Update the spacial lookup array to reflect the current positions of the particles
[numthreads(64, 1, 1)]
void UpdateSpatialLookUp (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= particleCount) return;

	// Reset offsets
	startIndecies[id.x] = particleCount;
    
	// Update index buffer
	uint index = id.x;
	int2 cell = GetCell(predictedPositions[index], smoothingRadius);
	uint hash = HashCell(cell);
	uint key = KeyFromHash(hash, particleCount);
	spacialLookUp[id.x] = uint3(index, hash, key);
}


float2 CalculateDensity(float2 pos)
{
	int2 originCell = GetCell(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;
	float density = 0;
	float nearDensity = 0;

	// Neighbour search
	for (int i = 0; i < 9; i++)
	{
		uint hash = HashCell(originCell + offsets[i]);
		uint key = KeyFromHash(hash, particleCount);
		uint currIndex = startIndecies[key];

		while (currIndex < particleCount)
		{
			uint3 indexData = spacialLookUp[currIndex];
			currIndex++;
			// Exit if no longer looking at correct bin
			if (indexData[2] != key) break;
			// Skip if hash does not match
			if (indexData[1] != hash) continue;

			uint neighbourIndex = indexData[0];
			float2 neighbourPos = predictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate density and near density
			float dst = sqrt(sqrDstToNeighbour);
			density += DensityKernel(dst, smoothingRadius);
			nearDensity += NearDensityKernel(dst, smoothingRadius);
		}
	}

	return float2(density, nearDensity);
}

[numthreads(64, 1, 1)]
void CalculateDensities (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= particleCount) return;

	float2 position = predictedPositions[id.x];
	densities[id.x] = CalculateDensity(position);
}

float CalculatePressure(float density)
{
    return (density - targetDensity) * pressureMultiplier;
}

float CalculateNearPressure(float nearDensity)
{
    return nearPressureMultiplier * nearDensity;
}

[numthreads(64, 1, 1)]
void CalculatePressureForce (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= particleCount) return;

	float density = densities[id.x][0];
	float densityNear = densities[id.x][1];
	float pressure = CalculatePressure(density);
	float nearPressure = CalculateNearPressure(densityNear);
	float2 pressureForce = 0;
	
	float2 pos = predictedPositions[id.x];
	int2 originCell = GetCell(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;

	// Neighbour search
	for (int i = 0; i < 9; i ++)
	{
		uint hash = HashCell(originCell + offsets[i]);
		uint key = KeyFromHash(hash, particleCount);
		uint currIndex = startIndecies[key];

		while (currIndex < particleCount)
		{
			uint3 indexData = spacialLookUp[currIndex];
			currIndex ++;
			// Exit if no longer looking at correct bin
			if (indexData[2] != key) break;
			// Skip if hash does not match
			if (indexData[1] != hash) continue;

			uint neighbourIndex = indexData[0];
			// Skip if looking at self
			if (neighbourIndex == id.x) continue;

			float2 neighbourPos = predictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate pressure force
			float dst = sqrt(sqrDstToNeighbour);
			float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);

			float neighbourDensity = densities[neighbourIndex][0];
			float neighbourNearDensity = densities[neighbourIndex][1];
			float neighbourPressure = CalculatePressure(neighbourDensity);
			float neighbourNearPressure = CalculateNearPressure(neighbourNearDensity);

			float sharedPressure = (pressure + neighbourPressure) * 0.5;
			float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

			pressureForce += dirToNeighbour * DensityDerivative(dst, smoothingRadius) * sharedPressure / neighbourDensity;
			pressureForce += dirToNeighbour * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / neighbourNearDensity;
		}
	}

	float2 acceleration = pressureForce / density;
	velocities[id.x] += acceleration * deltaTime;//
}

[numthreads(64, 1, 1)]
void CalculateViscosity (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= particleCount) return;

    float2 force = 0;

    float2 position = predictedPositions[id.x];

    //find the cell cords of the point
    int2 cell = GetCell(position, smoothingRadius);
    float radiusSquared = smoothingRadius * smoothingRadius;

    for (int i = 0; i < 9; i ++)
    {
        uint hash = HashCell(cell + offsets[i]);
        uint cellKey = KeyFromHash(hash, particleCount);
        int searchIndex = startIndecies[cellKey];

        //loop over all particles in the cell
        while (searchIndex < particleCount)
        {
            searchIndex++;

            //break if the cell key changes
            if (spacialLookUp[searchIndex][2] != cellKey) break;

            if (spacialLookUp[searchIndex][1] != hash)    continue;

            int NeighbourParticleIndex = spacialLookUp[searchIndex][0];

            if (NeighbourParticleIndex == id.x) continue;

            float2 offsetToNeighbour = predictedPositions[NeighbourParticleIndex] - position;
            float distanceSquared = dot(offsetToNeighbour, offsetToNeighbour); 

            //check if the particle is in the radius
            if (distanceSquared > radiusSquared) continue;
                
            //calculate the force
            force += (velocities[NeighbourParticleIndex] - velocities[id.x]) * ViscosityKernel(sqrt(distanceSquared), smoothingRadius);
        }
    }
    velocities[id.x] += force * viscosityMultiplier * deltaTime;
}

void CheckCollisions(uint particleIndex)
{
    float2 pos = positions[particleIndex];
    float2 vel = velocities[particleIndex];

    // Keep particle inside bounds
    float2 halfSize = boundsSize * 0.5f;
    float2 edgeDst = halfSize - abs(pos);

    if (edgeDst.x <= 0)
    {
        pos.x = halfSize.x * sign(pos.x);
        vel.x *= -1 * collisionDampening;
    }
    if (edgeDst.y <= 0)
    {
        pos.y = halfSize.y * sign(pos.y);
        vel.y *= -1 * collisionDampening;
    }

    // Update position and velocity
    positions[particleIndex] = pos;
    velocities[particleIndex] = vel;
}

float2 OutsideForces(float2 position, float2 velocity)
{
	// Gravity constant as a vector
	float2 gravityAccel = float2(0, -gravity);
	
	// mouse interaction
	if (mouseInputStrength != 0) {
		float2 mousePositionOffset = mousePosition - position;
		float distanceSquared = dot(mousePositionOffset, mousePositionOffset);
		if (distanceSquared < mouseRadius * mouseRadius)
		{
			float distance = sqrt(distanceSquared);
			float edgeT = (distance / mouseRadius);
			float centreT = 1 - edgeT;
			float2 directionToCentre = mousePositionOffset / distance;

			float gravityWeight = 1 - (centreT * saturate(mouseInputStrength / 10));
			float2 accel = gravityAccel * gravityWeight + directionToCentre * centreT * mouseInputStrength;
			accel -= velocity * centreT;
			return accel;
		}
	}

	return gravityAccel;
}

[numthreads(64, 1, 1)]
void OutsideForces(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= particleCount) return;

	// apply outside forces such as gravity and the mouse interaction
	velocities[id.x] += OutsideForces(positions[id.x], velocities[id.x]) * deltaTime;

	// update predicted positions
	const float predictionFactor = 1 / 120.0;
	predictedPositions[id.x] = positions[id.x] + velocities[id.x] * predictionFactor;
}

// Update the positions of the particles
[numthreads(64, 1, 1)]
void UpdateParticlePosition(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= particleCount) return;

	positions[id.x] += velocities[id.x] * deltaTime;
	CheckCollisions(id.x);
}